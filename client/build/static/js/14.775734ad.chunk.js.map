{"version":3,"sources":["@core/components/avatar/index.js","assets/images/lobby/slot-lock.png","component/GamePreviewItem.js","views/Home.js"],"names":["Avatar","forwardRef","props","ref","color","className","imgClassName","initials","size","badgeUp","content","icon","badgeColor","badgeText","img","imgHeight","imgWidth","status","Tag","tag","contentStyles","rest","classnames","undefined","style","str","results","split","forEach","e","push","join","getInitials","pill","src","alt","height","width","defaultProps","GamePreviewItem","item","history","useHistory","userData","useSelector","state","auth","useState","isLoading","setIsLoading","useEffect","setTimeout","ErrorToast","title","desc","Col","xs","name","levels_id","level","to","onClick","useJwt","playGame","then","res","data","toast","error","transition","Slide","hideProgressBar","autoClose","catch","err","console","log","id","draggable","image","require","default","Home","games","setGames","loadGameList","Row","map","key"],"mappings":"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","file":"static/js/14.775734ad.chunk.js","sourcesContent":["// ** React Imports\nimport { forwardRef } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport { Badge } from 'reactstrap'\nimport classnames from 'classnames'\n\nconst Avatar = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    color,\n    className,\n    imgClassName,\n    initials,\n    size,\n    badgeUp,\n    content,\n    icon,\n    badgeColor,\n    badgeText,\n    img,\n    imgHeight,\n    imgWidth,\n    status,\n    tag: Tag,\n    contentStyles,\n    ...rest\n  } = props\n\n  // ** Function to extract initials from content\n  const getInitials = str => {\n    const results = []\n    const wordArray = str.split(' ')\n    wordArray.forEach(e => {\n      results.push(e[0])\n    })\n    return results.join('')\n  }\n\n  return (\n    <Tag\n      className={classnames('avatar', {\n        [className]: className,\n        [`bg-${color}`]: color,\n        [`avatar-${size}`]: size\n      })}\n      ref={ref}\n      {...rest}\n    >\n      {img === false || img === undefined ? (\n        <span\n          className={classnames('avatar-content', {\n            'position-relative': badgeUp\n          })}\n          style={contentStyles}\n        >\n          {initials ? getInitials(content) : content}\n\n          {icon ? icon : null}\n          {badgeUp ? (\n            <Badge color={badgeColor ? badgeColor : 'primary'} className='badge-sm badge-up' pill>\n              {badgeText ? badgeText : '0'}\n            </Badge>\n          ) : null}\n        </span>\n      ) : (\n        <img\n          className={classnames({\n            [imgClassName]: imgClassName\n          })}\n          src={img}\n          alt='avatarImg'\n          height={imgHeight && !size ? imgHeight : 32}\n          width={imgWidth && !size ? imgWidth : 32}\n        />\n      )}\n      {status ? (\n        <span\n          className={classnames({\n            [`avatar-status-${status}`]: status,\n            [`avatar-status-${size}`]: size\n          })}\n        ></span>\n      ) : null}\n    </Tag>\n  )\n})\n\nexport default Avatar\n\n// ** PropTypes\nAvatar.propTypes = {\n  imgClassName: Proptypes.string,\n  className: Proptypes.string,\n  src: Proptypes.string,\n  tag: Proptypes.oneOfType([Proptypes.func, Proptypes.string]),\n  badgeUp: Proptypes.bool,\n  content: Proptypes.string,\n  icon: Proptypes.node,\n  contentStyles: Proptypes.object,\n  badgeText: Proptypes.string,\n  imgHeight: Proptypes.oneOfType([Proptypes.string, Proptypes.number]),\n  imgWidth: Proptypes.oneOfType([Proptypes.string, Proptypes.number]),\n  size: Proptypes.oneOf(['sm', 'lg', 'xl']),\n  status: Proptypes.oneOf(['online', 'offline', 'away', 'busy']),\n  badgeColor: Proptypes.oneOf([\n    'primary',\n    'secondary',\n    'success',\n    'danger',\n    'info',\n    'warning',\n    'dark',\n    'light-primary',\n    'light-secondary',\n    'light-success',\n    'light-danger',\n    'light-info',\n    'light-warning',\n    'light-dark'\n  ]),\n  color: Proptypes.oneOf([\n    'primary',\n    'secondary',\n    'success',\n    'danger',\n    'info',\n    'warning',\n    'dark',\n    'light-primary',\n    'light-secondary',\n    'light-success',\n    'light-danger',\n    'light-info',\n    'light-warning',\n    'light-dark'\n  ]),\n  initials(props) {\n    if (props['initials'] && props['content'] === undefined) {\n      return new Error('content prop is required with initials prop.')\n    }\n    if (props['initials'] && typeof props['content'] !== 'string') {\n      return new Error('content prop must be a string.')\n    }\n    if (typeof props['initials'] !== 'boolean' && props['initials'] !== undefined) {\n      return new Error('initials must be a boolean!')\n    }\n  }\n}\n\n// ** Default Props\nAvatar.defaultProps = {\n  tag: 'div'\n}\n","export default __webpack_public_path__ + \"static/media/slot-lock.df843c81.png\";","import { Fragment, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Link, useHistory } from 'react-router-dom'\nimport { Col } from 'reactstrap'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport Avatar from '@components/avatar'\nimport { X } from 'react-feather'\nimport { toast, Slide } from 'react-toastify'\n\nconst GamePreviewItem = ({item}) => {\n  const history = useHistory()\n  const { userData } = useSelector(state => state.auth)\n  const [isLoading, setIsLoading] = useState(true)\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false)\n    }, 2000)\n  }, [])\n\n  const ErrorToast = ({title, desc}) => (\n    <Fragment>\n      <div className='toastify-header'>\n        <div className='title-wrapper'>\n          <Avatar size='sm' color='danger' icon={<X size={12} />} />\n          <h6 className='text-danger ml-50 mb-0'>{title}</h6>\n        </div>\n      </div>\n      <div className='toastify-body'>\n        <span>{desc}</span>\n      </div>\n    </Fragment>\n  )\n\n  const play = () => {\n    // console.log(item)\n    useJwt\n      .playGame(item)\n      .then(res => {\n        if (res.data.status) {\n          history.push('/play', res.data.data)\n        } else {\n          toast.error(<ErrorToast desc={`error`} title={`Error`} />, { transition: Slide, hideProgressBar: true, autoClose: 2000 })\n        }\n      })\n      .catch(err => console.log(err))\n  }\n\n  if (isLoading) {\n    return (\n      <Col xs={3} className='p-1'>\n        <div className=\"skeleton-item\" name=\"game-preview-skeleton\"></div>\n      </Col>\n    )\n  }\n\n  if (userData.levels_id?.level >= item.level || item.level === 0) {\n    return (\n      <Col xs={3} className='p-1'>\n        <div className=\"slot-item w-100 h-100 position-relative\">\n          <Link to='#' onClick={play}>\n            <div className=\"slot-img-container w-100 position-relative golden-frame\">\n              <div id=\"frame-hover\" className=\"dead-center w-100 h-100\"></div>\n              <div className=\"deco-corners\">\n                <div className=\"small-gold deco-corner top-left\"></div>\n                <div className=\"small-gold deco-corner top-right\"></div>\n                <div className=\"small-gold deco-corner bottom-right\"></div>\n                <div className=\"small-gold deco-corner bottom-left\"></div>\n              </div>\n              <img draggable=\"false\" className=\"slot-img\" src={item.image}/>\n            </div>\n            <div className=\"game-title-field w-100 text-center text-uppercase d-flex align-items-center justify-content-center\">\n              {item.title}\n            </div>\n            {/* <div className=\"jackpot-line-container w-100 d-inline-flex align-items-center justify-content-around\">\n              <div className=\"jackpot-amount bold text-uppercase\">\n                {4} <span className=\"jackpot-word\">Jackpots</span>\n              </div>\n              <div className=\"jackpot-size text-white bold\">\n                {1000}\n              </div>\n              <img src={require('@src/assets/images/lobby/gold.png').default} draggable=\"false\" alt=\"gold\"/>\n            </div> */}\n            {/* <div className=\"fire-container to-center-abs\">\n              <img src={require('@src/assets/images/lobby/jackpot-hotness-animation-realflames.gif').default} className=\"w-100\"/>\n            </div>\n            <div className=\"jackpot-hotness-container golden-border to-center-abs\">\n              <div className=\"jackpot-hotness-fill to-center-abs\">\n                <div className=\"diagram-container\">\n                  <div className=\"diagram-filler flames\" style={{width:'100%'}}></div>\n                </div>\n                <div className=\"jackpot-hotness-text\">120°</div>\n              </div>\n            </div> */}\n          </Link>\n        </div>\n      </Col>\n    )\n  } else {\n    return (\n      <Col xs={3} className='p-1'>\n        <div className=\"slot-item w-100 h-100 position-relative\">\n          <div>\n            <div className=\"lock-text bold text-uppercase text-center to-center-abs\">\n              From Level {item.level} \n              </div>\n            <div className=\"lock dead-center\">\n              <img src={require('@src/assets/images/lobby/slot-lock.png').default} className=\"w-100\" />\n            </div>\n          </div>\n          <div className=\"game-locked dead-center\"></div>\n          <Link to='#'>\n            <div className=\"slot-img-container w-100 position-relative golden-frame\">\n              <div id=\"frame-hover\" className=\"dead-center w-100 h-100\"></div>\n              <div className=\"deco-corners\">\n                <div className=\"small-gold deco-corner top-left\"></div>\n                <div className=\"small-gold deco-corner top-right\"></div>\n                <div className=\"small-gold deco-corner bottom-right\"></div>\n                <div className=\"small-gold deco-corner bottom-left\"></div>\n              </div>\n              <img draggable=\"false\" className=\"slot-img locked-game\" src={item.image}/>\n            </div>\n            <div className=\"game-title-field w-100 text-center text-uppercase d-flex align-items-center justify-content-center\">\n              {item.title}\n            </div>\n            {/* <div className=\"jackpot-line-container w-100 d-inline-flex align-items-center justify-content-around\">\n              <div className=\"jackpot-amount bold text-uppercase\">\n                {4} <span className=\"jackpot-word\">Jackpots</span>\n              </div>\n              <div className=\"jackpot-size text-white bold\">\n                {1000}\n              </div>\n              <img src={require('@src/assets/images/lobby/gold.png').default} draggable=\"false\" alt=\"gold\"/>\n            </div> */}\n            {/* <div className=\"fire-container to-center-abs\">\n              <img src={require('@src/assets/images/lobby/jackpot-hotness-animation-realflames.gif').default} className=\"w-100\"/>\n            </div>\n            <div className=\"jackpot-hotness-container golden-border to-center-abs\">\n              <div className=\"jackpot-hotness-fill to-center-abs\">\n                <div className=\"diagram-container\">\n                  <div className=\"diagram-filler flames\" style={{width:'100%'}}></div>\n                </div>\n                <div className=\"jackpot-hotness-text\">120°</div>\n              </div>\n            </div> */}\n          </Link>\n        </div>\n      </Col>\n    )\n  }\n}\n\nexport default GamePreviewItem\n","import { useEffect, useState } from 'react'\nimport {Row} from 'reactstrap'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport GamePreviewItem from '../component/GamePreviewItem'\nconst Home = () => {\n  const [games, setGames] = useState([])\n  \n  const loadGameList = () => {\n    useJwt\n    .loadGameList()\n    .then(res => {\n      if (res.data.status) {\n        setGames(res.data.data)\n      }\n    })\n    .catch(err => console.log(err))\n  }\n  \n  useEffect(() => {\n    loadGameList()\n  }, [])\n\n  return (\n    <div id='lobby-page'>\n      <div id=\"lobby-content-container\" className=\"container-fluid\">\n        <Row className='justify-content-center m-0'>\n          {\n            games.map((item, key) => (\n              <GamePreviewItem key={key} item={item}/>\n            ))\n          }\n        </Row>\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}